<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Liiii00的制作-响应式的触发对象与触发源</title>
    <url>/2022/07/31/Liiii00%E7%9A%84%E5%88%B6%E4%BD%9C-%E5%93%8D%E5%BA%94%E5%BC%8F%E7%9A%84%E8%A7%A6%E5%8F%91%E5%99%A8/</url>
    <content><![CDATA[<p>随着比赛项目的完工，我终于有时间来写写自己对于游戏编程的想法啦！</p>
<p>如你们所见，这里是Liiii00的第一篇想法，这里我想开一个新坑来聊一聊我在架构游戏的时候的一些感受与踩过的坑，希望有所帮助，希望大佬轻喷….这里大概只会有几篇文章的篇幅，但都是花费了非常多时间码代码跑测试之后的血与泪。</p>
<p>如你们所见，这一篇文章我想讲讲最近才加入的统一的触发系统，我们用这个实现了事件触发，使得游戏内的玩法变成了近乎组件化的构建方式，极大地增加了工作效率与减少了修改代码的次数。当然这里还有很多不足，不过对于我的小游戏，已经够用了。</p>
<p>软件工程里有一句话：<strong>对修改关闭，对扩展开放</strong>。这套触发系统就是基于这样的原则进行构建的。对于游戏而言，实现一个feature经常需要几个脚本配合使用，起初我们使用的是原始的all in one架构，一个脚本写完所有东西，结果就是一个三四百行的代码里面有数不清的逻辑关系，数不清的编辑器接口，以及数不清的bug，比如我们所使用的控制人物运动的脚本（我也不会去重构它了，这里面的东西应该是不会再改）</p>
<p><img src="https://cdn.jsdelivr.net/gh/Liiii007/LiquidBlog@main/img/20220731112638.png"><br>(你能分清什么控制的什么吗？反正我是不敢碰这东西…..)</p>
<p>再后来，我们把一些常用的组件拆开了，比如控制材质渐变的组件，自定义的球形触发器（这里包含了unity物理系统的巨坑，在bug篇中会再说一说，先挖个坑）</p>
<p><img src="https://cdn.jsdelivr.net/gh/Liiii007/LiquidBlog@main/img/20220731112913.png"></p>
<p>比如这一个染色墙，挂载了一个染色的功能，有一个当前颜色的参数，还有一个Shader Progressor组件用以产生反馈。是不是就比之前的简洁多了？</p>
<p>但是这里还有一个问题没解决，那就是在发生了对应的事件时，我该用什么触发它呢？如果你写过Unity的脚本，很自然地就会想到GetComponent<xxx>，然后存起来或者直接调用里面写好的方法。如果脚本的量很少，这样做没问题，但是如果你有着十几个feature可选，有着几十个这样的物体，还有着很多的这类事件，那你该咋办？每增加一个这种脚本，就需要多记忆或查找至少两个API（初始化和触发）和新增至少五行代码。这时候，如果你了解一点接口与继承，就能自定义一个非常好用的自动的通用触发器啦，这就是标题中的触发对象与触发源。</p>
<p>先看接口：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>


]]></content>
      <tags>
        <tag>游戏制作</tag>
        <tag>C#</tag>
        <tag>架构</tag>
      </tags>
  </entry>
  <entry>
    <title>你好，世界</title>
    <url>/2022/07/26/hello-world/</url>
    <content><![CDATA[<p>一个小世界的诞生</p>
]]></content>
  </entry>
  <entry>
    <title>使用VSCode+服务器实现近乎本地的编程体验</title>
    <url>/2022/07/26/%E4%BD%BF%E7%94%A8VSCode-%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%9E%E7%8E%B0%E8%BF%91%E4%B9%8E%E6%9C%AC%E5%9C%B0%E7%9A%84%E7%BC%96%E7%A8%8B%E4%BD%93%E9%AA%8C/</url>
    <content><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/Liiii007/LiquidBlog@main/img/Eyh73GnVcAE6E5T.jpg"></p>
<p>VSCode，一个近乎全能的IDE，上天下地无所不能。我写python代码和markdown文章的第一步几乎都是启动VSCode，经过了将近一年的使用，我已经完全习惯了使用VSCode的工作流。恰逢最近新购入了一台云服务器，我想，与其用XShell等又大又不好看的ssh软件，不如将云服务器的ssh和文件管理都集成到VSCode中来。</p>
]]></content>
  </entry>
</search>
